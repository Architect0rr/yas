
// Copyright (c) 2010-2017 niXman (i dot nixman dog gmail dot com). All
// rights reserved.
//
// This file is part of YAS(https://github.com/niXman/yas) project.
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef _yas_test__buffer_hpp__included_
#define _yas_test__buffer_hpp__included_

/***************************************************************************/

template<typename archive_traits>
bool buffer_test(const char* archive_type, const char* io_type) {
	static const char str1[] = "intrusive buffer test";
	yas::intrusive_buffer buf1(str1, sizeof(str1)-1);

	typename archive_traits::oarchive oa1;
	archive_traits::ocreate(oa1, archive_type, io_type);
	oa1 & buf1;

	// binary
	if ( yas::is_binary_archive<typename archive_traits::oarchive_type>::value ) {
		if ( archive_traits::oarchive_type::flags() & yas::compacted ) {
			static const std::uint8_t size32_le[] = {
				 0x79,0x61,0x73,0x30,0x33,0x30,0x34,0x01,0x15,0x69,0x6e,0x74,0x72,0x75
				,0x73,0x69,0x76,0x65,0x20,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x74,0x65,0x73,0x74
			};
			static const std::uint8_t size32_be[] = {
				 0x79,0x61,0x73,0x30,0x30,0x38,0x34,0x00,0x00,0x00,0x15,0x69,0x6e,0x74,0x72,0x75
				,0x73,0x69,0x76,0x65,0x20,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x74,0x65,0x73,0x74
			};

			const std::uint8_t *ptr  = oa1.is_little_endian() ? size32_le : size32_be;
			const std::size_t   size = oa1.is_little_endian() ? sizeof(size32_le) : sizeof(size32_be);
			if ( oa1.size() != size ) {
				std::cout << "BUFFER intrusive serialization error! [1.1]" << std::endl;
				return false;
			}
			if ( !oa1.compare(ptr, size) ) {
				std::cout << "BUFFER intrusive serialization error! [2.1]" << std::endl;
				return false;
			}
		} else {
			static const std::uint8_t sizevar_le[] = {
                 0x79,0x61,0x73,0x30,0x31,0x30,0x34,0x15,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x69,0x6e,0x74
                ,0x72,0x75,0x73,0x69,0x76,0x65,0x20,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x74,0x65,0x73,0x74
			};
			static const std::uint8_t sizevar_be[] = {
				 0x79,0x61,0x73,0x30,0x32,0x38,0x34,0x01,0x15,0x69,0x6e,0x74,0x72,0x75,0x73
			    ,0x69,0x76,0x65,0x20,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x74,0x65,0x73,0x74
			};

			const std::uint8_t *ptr  = oa1.is_little_endian() ? sizevar_le : sizevar_be;
			const std::size_t   size = oa1.is_little_endian() ? sizeof(sizevar_le) : sizeof(sizevar_be);
			if ( oa1.size() != size ) {
				std::cout << "BUFFER intrusive serialization error! [1.3]" << std::endl;
				return false;
			}
			if ( !oa1.compare(ptr, size) ) {
				std::cout << "BUFFER intrusive serialization error! [2.3]" << std::endl;
				return false;
			}
		}
	// text
	} else if ( yas::is_text_archive<typename archive_traits::oarchive_type>::value ) {

//		if ( oa1.size() != res_size ) {
//			std::cout << "BUFFER intrusive serialization error! [3]" << std::endl;
//			return false;
//		}
//		if ( !oa1.compare(res_ptr, res_size) ) {
//			std::cout << "BUFFER intrusive serialization error! [4]" << std::endl;
//			return false;
//		}
	}

	static const char str2[] = "shared buffer test";
	yas::shared_buffer buf2(str2, sizeof(str2)-1);
	typename archive_traits::oarchive oa2;
	archive_traits::ocreate(oa2, archive_type, io_type);
	oa2 & buf2;

	if ( yas::is_binary_archive<typename archive_traits::oarchive_type>::value ){

//		if ( oa2.size() != res_size ) {
//			std::cout << "BUFFER shared serialization error! [5]" << std::endl;
//			return false;
//		}
//		if ( !oa2.compare(res_ptr, res_size) ) {
//			std::cout << "BUFFER shared serialization error! [6]" << std::endl;
//			return false;
//		}
	} else if ( yas::is_text_archive<typename archive_traits::oarchive_type>::value ) {
//		if ( oa2.size() != res_size ) {
//			std::cout << "BUFFER shared serialization error! [7]" << std::endl;
//			return false;
//		}
//		if ( !oa2.compare(res_ptr, res_size) ) {
//			std::cout << "BUFFER shared serialization error! [8]" << std::endl;
//			return false;
//		}
//		typename archive_traits::iarchive ia1;
//		archive_traits::icreate(ia1, oa2, archive_type, io_type);
//		yas::shared_buffer buf4;
//		ia1 & buf4;
//		if ( buf4.size != sizeof(str2)-1 || memcmp(str2, buf4.data.get(), buf4.size) ) {
//			std::cout << "BUFFER shared deserialization error! [9]" << std::endl;
//			return false;
//		}
	}

	return true;
}

#undef XOR

/***************************************************************************/

#endif // _yas_test__buffer_hpp__included_
