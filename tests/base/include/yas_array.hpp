
// Copyright (c) 2010-2023 niXman (github dot nixman at pm dot me). All
// rights reserved.
//
// This file is part of YAS(https://github.com/niXman/yas) project.
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef __yas__tests__base__include__yas_array_hpp
#define __yas__tests__base__include__yas_array_hpp

/***************************************************************************/

template<typename archive_traits>
bool yas_array_test(std::ostream &log, const char *archive_type, const char *test_name) {
    {

    }
    {
        int iarr[2]{0, 1};
        int *iptr = nullptr;
        std::size_t isize = 0;

        typename archive_traits::oarchive oa;
        archive_traits::ocreate(oa, archive_type);

        auto o0 = YAS_OBJECT_NVP("object0", ("arr", yas::array(std::begin(iarr), std::end(iarr))));
        oa & o0;

        typename archive_traits::iarchive ia;
        archive_traits::icreate(ia, oa, archive_type);

        auto iwrap = yas::array(&iptr, &isize);
        auto o1 = YAS_OBJECT_NVP("object0", ("arr", std::move(iwrap)));
        ia & o1;

        if ( isize != 2 ) {
            YAS_TEST_REPORT(log, archive_type, test_name);

            iwrap.free(iptr);

            return false;
        }
        if ( !iptr ) {
            YAS_TEST_REPORT(log, archive_type, test_name);
            return false;
        }
        if ( iptr[0] != 0 || iptr[1] != 1 ) {
            YAS_TEST_REPORT(log, archive_type, test_name);

            iwrap.free(iptr);

            return false;
        }

        iwrap.free(iptr);
    }
    {
        int iarr[2]{0, 1};
        int *iptr = nullptr;
        std::size_t isize = 0;

        typename archive_traits::oarchive oa;
        archive_traits::ocreate(oa, archive_type);

        auto o0 = YAS_OBJECT_NVP("object0", ("arr", yas::array(iarr, sizeof(iarr)/sizeof(iarr[0]))));
        oa & o0;

        typename archive_traits::iarchive ia;
        archive_traits::icreate(ia, oa, archive_type);

        auto iwrap = yas::array(&iptr, &isize);
        auto o1 = YAS_OBJECT_NVP("object0", ("arr", std::move(iwrap)));
        ia & o1;

        if ( isize != 2 ) {
            YAS_TEST_REPORT(log, archive_type, test_name);

            iwrap.free(iptr);

            return false;
        }
        if ( !iptr ) {
            YAS_TEST_REPORT(log, archive_type, test_name);
            return false;
        }
        if ( iptr[0] != 0 || iptr[1] != 1 ) {
            YAS_TEST_REPORT(log, archive_type, test_name);

            iwrap.free(iptr);

            return false;
        }

        iwrap.free(iptr);
    }
    {
        // zero-size array test

        int iarr[2]{0, 1};
        int *iptr = nullptr;
        std::size_t isize = 2;

        typename archive_traits::oarchive oa;
        archive_traits::ocreate(oa, archive_type);

        auto o0 = YAS_OBJECT_NVP("object0", ("arr", yas::array(iarr, 0)));
        oa & o0;

        typename archive_traits::iarchive ia;
        archive_traits::icreate(ia, oa, archive_type);

        auto iwrap = yas::array(&iptr, &isize);
        auto o1 = YAS_OBJECT_NVP("object0", ("arr", std::move(iwrap)));
        ia & o1;

        if ( isize != 0 ) {
            YAS_TEST_REPORT(log, archive_type, test_name);
            return false;
        }
        if ( iptr ) {
            YAS_TEST_REPORT(log, archive_type, test_name);
            return false;
        }
    }
    {
        // char array

        char carr[2]{0, 1};
        int *cptr = nullptr;
        std::size_t csize = 2;

        typename archive_traits::oarchive oa;
        archive_traits::ocreate(oa, archive_type);

        auto o0 = YAS_OBJECT_NVP("object0", ("arr", yas::array(carr, sizeof(carr)/sizeof(carr[0]))));
        oa & o0;

        typename archive_traits::iarchive ia;
        archive_traits::icreate(ia, oa, archive_type);

        auto cwrap = yas::array(&cptr, &csize);
        auto o1 = YAS_OBJECT_NVP("object0", ("arr", std::move(cwrap)));
        ia & o1;

        if ( csize != 2 ) {
            YAS_TEST_REPORT(log, archive_type, test_name);
            return false;
        }
        if ( cptr[0] != 0 || cptr[1] != 1 ) {
            YAS_TEST_REPORT(log, archive_type, test_name);
            return false;
        }
    }
    return true;
}

/***************************************************************************/

#endif // __yas__tests__base__include__yas_array_hpp
