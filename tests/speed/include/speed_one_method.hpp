
// Copyright (c) 2010-2012 niXman (i dot nixman dog gmail dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef _yas_test__speed_one_method_hpp__included_
#define _yas_test__speed_one_method_hpp__included_

#if defined(YAS_SERIALIZE_BOOST_TYPES)
#include <sstream>

#include <boost/archive/binary_iarchive.hpp>
#include <boost/archive/binary_oarchive.hpp>
#include <boost/archive/text_iarchive.hpp>
#include <boost/archive/text_oarchive.hpp>
#endif

/***************************************************************************/

struct one_method_speed_test_pod_type {
	size_t x;
	size_t y;

	/** boost.serialization call only this method */
	template<typename Archive>
	void serialize(Archive& ar, const unsigned int) {
		ar & x
			& y;
	}

	template<typename Archive>
	void serialize(Archive& ar) {
		ar & x
			& y;
	}
};

/***************************************************************************/

#if defined(YAS_SERIALIZE_BOOST_TYPES)

template<typename T>
struct test_one_method_selector;

template<>
struct test_one_method_selector<yas::binary_mem_oarchive> {
	static void test(const size_t iterations, size_t& archive_size) {
		one_method_speed_test_pod_type _one_method_speed_test_pod_type;
		std::ostringstream os;
		boost::archive::binary_oarchive oa(os);
		for ( size_t idx = 0; idx < iterations; ++idx ) {
			_one_method_speed_test_pod_type.x = _one_method_speed_test_pod_type.y = idx;
			oa & _one_method_speed_test_pod_type;
		}
		archive_size = os.str().length();
	}
};

template<>
struct test_one_method_selector<yas::text_mem_oarchive> {
	static void test(const size_t iterations, size_t& archive_size) {
		one_method_speed_test_pod_type _one_method_speed_test_pod_type;
		std::ostringstream os;
		boost::archive::text_oarchive oa(os);
		for ( size_t idx = 0; idx < iterations; ++idx ) {
			_one_method_speed_test_pod_type.x = _one_method_speed_test_pod_type.y = idx;
			oa & _one_method_speed_test_pod_type;
		}
		archive_size = os.str().length();
	}
};

#endif // defined(YAS_SERIALIZE_BOOST_TYPES)

/***************************************************************************/

template<typename OA, typename IA>
std::string one_method_speed_test(yas::uint32_t iterations, const char* archive_type) {
	std::ostringstream os;
	os
	<< "one method" << std::endl
	<< "   " << archive_type << std::endl;

	clock_t start = clock();
	clock_t boost_time=0, yas_time;

	size_t boost_size = 0;

#if defined(YAS_SERIALIZE_BOOST_TYPES)
	test_one_method_selector<OA>::test(iterations, boost_size);
	boost_time=clock()-start;

	os
	<< "      boost time: " << (boost_time/(CLOCKS_PER_SEC/1000)) << " ms." << std::endl;
//	<< "      boost size: " << boost_size << std::endl;
#endif

	start = clock();

	one_method_speed_test_pod_type _one_method_speed_test_pod_type;
	OA oa;
	for ( size_t idx = 0; idx < iterations; ++idx ) {
		_one_method_speed_test_pod_type.x = _one_method_speed_test_pod_type.y = idx;
		oa & _one_method_speed_test_pod_type;
	}
	yas_time=clock()-start;

	os
	<< "      yas time  : " << (yas_time/(CLOCKS_PER_SEC/1000)) << " ms." << std::endl
//	<< "      yas size  : " << oa.get_intrusive_buffer().size << std::endl
	<< "      speed up  : " << (((double)boost_time)/((double)yas_time)) << std::endl;

	return os.str();
}

/***************************************************************************/

#endif // _yas_test__speed_one_method_hpp__included_
