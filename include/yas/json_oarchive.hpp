
// Copyright (c) 2010-2023 niXman (github dot nixman at pm dot me). All
// rights reserved.
//
// This file is part of YAS(https://github.com/niXman/yas) project.
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef __yas__json_oarchive_hpp
#define __yas__json_oarchive_hpp

#include "detail/type_traits/type_traits.hpp"
#include "detail/type_traits/serializer.hpp"
#include "detail/io/header.hpp"
#include "detail/io/json_streams.hpp"
#include "detail/tools/base_object.hpp"
#include "detail/tools/noncopyable.hpp"
#include "detail/tools/limit.hpp"
#include "defaul_traits.hpp"

#include "types/utility/fundamental.hpp"
#include "types/utility/enum.hpp"
#include "types/utility/usertype.hpp"
#include "types/utility/autoarray.hpp"
#include "types/utility/buffer.hpp"
#include "types/utility/value.hpp"
#include "types/utility/object.hpp"
#include "types/utility/asis.hpp"
#include "types/utility/init.hpp"
#include "types/utility/array.hpp"

#include "buffers.hpp"
#include "object.hpp"
#include "version.hpp"

namespace yas {

/***************************************************************************/

template<typename OS, std::size_t F = json|ehost, typename Trait = yas::default_traits>
struct json_oarchive
    :detail::json_ostream<OS, F, Trait>
    ,detail::oarchive_header<F>
{
    YAS_NONCOPYABLE(json_oarchive)
    YAS_MOVABLE(json_oarchive)

    using stream_type = OS;
    using this_type = json_oarchive<OS, F, Trait>;

    json_oarchive(OS &os)
        :detail::json_ostream<OS, F, Trait>(os)
        ,detail::oarchive_header<F>(os)
    {}

    template<typename T>
    this_type& operator& (const T &v) {
        using namespace detail;
        return detail::serializer<
             detail::type_properties<T>::value
            ,detail::serialization_method<T, this_type>::value
            ,F
            ,T
        >::save(*this, v);
    }

    this_type& serialize() { return *this; }

    template<typename Head, typename... Tail>
    this_type& serialize(const Head& head, const Tail&... tail) {
        return operator&(head).serialize(tail...);
    }

    template<typename... Args>
    this_type& operator()(const Args&... args) {
        return serialize(args...);
    }

    template<typename... Args>
    this_type& save(const Args&... args) {
        return serialize(args...);
    }
};

/***************************************************************************/

} // namespace yas

#endif // __yas__json_oarchive_hpp
