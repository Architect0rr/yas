
// Copyright (c) 2010-2012 niXman (i dot nixman dog gmail dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef _yas__metafunctions_hpp__included_
#define _yas__metafunctions_hpp__included_

#include <yas/mpl/bool.hpp>

namespace yas {
namespace detail {

/***************************************************************************/

template<bool ok, typename T1, typename T2>
struct if_c {
   typedef T1 type;
};

template<typename T1, typename T2>
struct if_c<false, T1, T2> {
   typedef T2 type;
};

template<typename P, typename T1, typename T2>
struct if_ {
   typedef typename if_c<P::value, T1, T2>::type type;
};

template<typename A1, typename A2>
struct and_: bool_<(A1::value && A2::value)>::type {};

template<typename A1, typename A2>
struct or_: bool_<(A1::value || A2::value)>::type {};

template<typename A1>
struct not_: bool_<(!A1::value)>::type {};

/***************************************************************************/

} // namespace detail
} // namespace yas

#endif // _yas__metafunctions_hpp__included_
