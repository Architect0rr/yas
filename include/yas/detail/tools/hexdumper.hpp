
// Copyright (c) 2010-2012 niXman (i dot nixman dog gmail dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef _yas__hexdumper_hpp__included_
#define _yas__hexdumper_hpp__included_

#include <iostream>
#include <sstream>
#include <iomanip>

namespace yas {
namespace detail {

/***************************************************************************/

namespace {

static size_t crc_tab[256];

static void chksum_crc32gentab() {
	size_t crc, poly;
	int i, j;

	poly = 0xedb88320;
	for ( i = 0; i < 256; ++i ) {
		crc = i;
		for ( j = 8; j > 0; --j ) {
			if (crc & 1) {
				crc = (crc >> 1) ^ poly;
			} else {
				crc >>= 1;
			}
		}
		crc_tab[i] = crc;
	}
}

size_t chksum_crc32(const unsigned char *block, size_t length) {
	size_t crc, idx;

	crc = 0xFFFFFFFF;
	for ( idx = 0; idx < length; ++idx ) {
		crc = ((crc >> 8) & 0x00FFFFFF) ^ crc_tab[(crc ^ *block++) & 0xFF];
	}
	return (crc ^ 0xFFFFFFFF);
}

} // namespace

/***************************************************************************/

std::string hex_dump(const char* buf, size_t len) {
	chksum_crc32gentab();

	/**  */
	const unsigned char* buffer = reinterpret_cast<const unsigned char*>(buf);
	std::stringstream os;
	if ( !buffer || len <= 0 ) return os.str();

	size_t addr = 0;

	size_t n = 0, idx = 0, cnt2 = 0;
	os << std::endl;
	for ( n = 0; n < len; ++n ) {
		if ( cnt2 == 0 ) {
			os << std::setw(7) << std::setfill('0') << addr << ": ";
			addr += 16;
		}
		cnt2 = (cnt2 + 1) % 18;
		if ( cnt2 <= 16 ) {
			os << std::hex << std::setw(2) << std::setfill('0') << (size_t)buffer[n] << " ";
		} else {
			os << "  ";
			os << std::setfill(' ');
			for ( idx = n - cnt2 + 1; idx < n; ++idx) {
				if ( buffer[idx] < 32 || 126 < buffer[idx] ) {
					os << '.';
				} else {
					os << buffer[idx];
				}
			}
			os << std::endl << std::dec;
			cnt2 = 0;
			n--;
		}
	}

	os << std::setfill(' ');

	for ( idx = cnt2+1; idx <= 16 ; ++idx ) {
		os << std::setw(2) << "-- ";
	}
	os << "  ";

	for ( idx = n - cnt2; cnt2 <= 16 && idx < n; ++idx ) {
		if ( buffer[idx] < 32 || 126 < buffer[idx] ) {
			os << '.';
		} else {
			os << buffer[idx];
		}
	}
	os << std::dec;

	os << std::endl
		<< "length: " << len << " bytes. "
		<< "CRC32: 0x" << std::hex << chksum_crc32(buffer, len)
		<< std::endl;

	return os.str();
}

std::string hex_dump(const std::string& buf, size_t len = (size_t)-1) {
	return hex_dump(buf.c_str(), ((len==(size_t)-1)?buf.size():len));
}

/***************************************************************************/

} // namespace detail
} // namespace yas

#endif // _yas__hexdumper_hpp__included_
