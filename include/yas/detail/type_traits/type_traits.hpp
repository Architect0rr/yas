
// Copyright (c) 2010-2013 niXman (i dot nixman dog gmail dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef _yas__type_traits_hpp
#define _yas__type_traits_hpp

#include <type_traits>

namespace yas {
namespace detail {

/***************************************************************************/

template<
	 typename T
	,typename A1
	,typename A2
	,typename A3 = void
	,typename A4 = void
	,typename A5 = void
	,typename A6 = void
	,typename A7 = void
	,typename A8 = void
>
struct is_any_of: std::integral_constant<
	bool
	,	std::is_same<T, A1>::value
	|| std::is_same<T, A2>::value
	|| std::is_same<T, A3>::value
	|| std::is_same<T, A4>::value
	|| std::is_same<T, A5>::value
	|| std::is_same<T, A6>::value
	|| std::is_same<T, A7>::value
	|| std::is_same<T, A8>::value
>
{};

/***************************************************************************/

template<typename T>
struct is_array_of_pods: std::integral_constant<
	 bool
	,std::is_array<T>::value && std::is_fundamental<typename std::remove_all_extents<T>::type>::value
>
{};

/***************************************************************************/

} // namespace detail
} // namespace yas

#endif // _yas__type_traits_hpp
