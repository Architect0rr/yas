
// Copyright (c) 2010-2017 niXman (i dot nixman dog gmail dot com). All
// rights reserved.
//
// This file is part of YAS(https://github.com/niXman/yas) project.
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef __yas__detail__io__json_streams_hpp
#define __yas__detail__io__json_streams_hpp

#include <yas/detail/config/config.hpp>

#include <yas/detail/io/io_exceptions.hpp>
#include <yas/detail/io/serialization_exception.hpp>
#include <yas/detail/type_traits/type_traits.hpp>
#include <yas/detail/tools/cast.hpp>

#include <stack>
#include <cassert>
#include <limits>

namespace yas {
namespace detail {

/***************************************************************************/

#ifndef __YAS_JSON_STACK_SIZE
#  define __YAS_JSON_STACK_SIZE 16
#endif // __YAS_JSON_STACK_SIZE

/***************************************************************************/

enum class e_state {
     in_object
    ,in_array
};

template<std::size_t N>
struct fixed_stack {
    fixed_stack()
            :arr{}
            ,p{arr.begin()}
    {}

    bool empty() const {
        return p == arr.begin();
    }

    void push(e_state v) {
        assert(p != arr.end());
        *p++ = std::move(v);
    }

    void pop() {
        assert(p > arr.begin());
        --p;
    }

    e_state& top() {
        assert(p > arr.begin());
        return *(p-1);
    }
    const e_state& top() const {
        assert(p > arr.begin());
        return *(p-1);
    }

private:
    using iterator = typename std::array<e_state, N>::iterator;
    std::array<e_state, N> arr;
    iterator p;
};

/***************************************************************************/

template<typename IS, std::size_t F, typename Trait>
struct json_istream {
	json_istream(IS &is)
		:is(is)
	{}

	template<typename T = std::size_t>
	T read_seq_size() {
		T size{};
		read(size);

		return size;
	}

	// for arrays
	void read(void *ptr, std::size_t size) {
		YAS_THROW_ON_READ_ERROR(size, !=, is.read(ptr, size));
	}

    template<typename T>
    void ungetch(T v, YAS_ENABLE_IF_IS_ANY_OF(T, char, signed char, unsigned char)) {
        is.ungetch(YAS_SCAST(char, v));
    }

    // for char and signed char
    template<typename T>
    void read(T &v, YAS_ENABLE_IF_IS_ANY_OF(T, char, signed char)) {
        std::int16_t t;
        read(t);

        v = YAS_SCAST(T, t);
    }
    // for unsigned char
    template<typename T>
    void read(T &v, YAS_ENABLE_IF_IS_ANY_OF(T, unsigned char)) {
        std::uint16_t t;
        read(t);

        v = YAS_SCAST(T, t);
    }

	// for bools only
	template<typename T>
	void read(T &v, YAS_ENABLE_IF_IS_ANY_OF(T, bool)) {
        static const char ltrue[] = "true";
        static const char lfalse[] = "false";

        char buf[std::max(sizeof(ltrue), sizeof(lfalse))];
		YAS_THROW_ON_READ_ERROR(1, !=, is.read(buf, 1));

        v = (buf[0] == 't');
        const std::size_t chars = (v ? sizeof(ltrue)-1-1 : sizeof(lfalse)-1-1);

        YAS_THROW_ON_READ_ERROR(chars, !=, is.read(buf, chars));
	}

	// for signed 16/32/64 bits
	template<typename T>
	void read(T &v, YAS_ENABLE_IF_IS_ANY_OF(T, std::int16_t, std::int32_t, std::int64_t)) {
		char buf[sizeof(T)*4];
		const std::size_t n = read_num(buf, sizeof(buf));
		v = Trait::template atoi<T>(buf, n);
	}

	// for unsigned 16/32/64 bits
	template<typename T>
	void read(T &v, YAS_ENABLE_IF_IS_ANY_OF(T, std::uint16_t, std::uint32_t, std::uint64_t)) {
        char buf[sizeof(T)*4];
        const std::size_t n = read_num(buf, sizeof(buf));

        v = Trait::template atou<T>(buf, n);
	}

	// for floats
	template<typename T>
	void read(T &v, YAS_ENABLE_IF_IS_ANY_OF(T, float)) {
		char buf[std::numeric_limits<T>::max_exponent10+20];
		const std::size_t n = read_double(buf, sizeof(buf));

		v = Trait::template atof<T>(buf, n);
	}

	// for doubles
	template<typename T>
	void read(T &v, YAS_ENABLE_IF_IS_ANY_OF(T, double)) {
        char buf[std::numeric_limits<T>::max_exponent10+20];
        const std::size_t n = read_double(buf, sizeof(buf));

		v = Trait::template atod<T>(buf, n);
	}

    /////////////////////////////////////////////////////////////////////////

    template<std::size_t N>
    bool read_and_check(const char (&ch)[N]) {
        char tmp[N];
        read(tmp, N-1);

        return 0 == std::memcmp(ch, tmp, N-1);
    }

    void start_object_node(const char *name, std::size_t len) {
        if ( stack.empty() ) {
            YAS_THROW_IF_BAD_JSON_CHARS((*this), "{");
        } else {
            YAS_THROW_IF_BAD_JSON_CHARS((*this), "\"");
            YAS_THROW_IF_BAD_JSON_KEY(is, name, len);
            YAS_THROW_IF_BAD_JSON_CHARS((*this), "\":{");
        }

        stack.push(e_state::in_object);
    }
    void start_array_node() {
        YAS_THROW_IF_BAD_JSON_CHARS((*this), "[");
        stack.push(e_state::in_array);
    }
    void finish_node() {
        const auto top = stack.top();
        if ( top == e_state::in_array ) {
            YAS_THROW_IF_BAD_JSON_CHARS((*this), "]");
        } else {
            YAS_THROW_IF_BAD_JSON_CHARS((*this), "}");
        }

        stack.pop();
    }

    /////////////////////////////////////////////////////////////////////////

    std::size_t read_num(char *ptr, std::size_t size) {
        char *p = ptr;

        do {
            YAS_THROW_ON_READ_ERROR(sizeof(*ptr), !=, is.read(ptr, sizeof(*ptr)));
            switch ( *ptr ) {
                case '-':
                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9': break;
                default: {
                    is.ungetch(*ptr);
                    return ptr-p;
                }
            }
            ++ptr;
        } while ( --size );

        is.ungetch(*ptr);

        return ptr-p;
    }

    std::size_t read_double(char *ptr, std::size_t size) {
        char *p = ptr;

        do {
            YAS_THROW_ON_READ_ERROR(sizeof(*ptr), !=, is.read(ptr, sizeof(*ptr)));
            switch ( *ptr ) {
                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                case '-':
                case '.':
                case 'e':
                case 'E': break;
                default: {
                    is.ungetch(*ptr);
                    return ptr-p;
                }
            }
            ++ptr;
        } while ( --size );

        is.ungetch(*ptr);

        return ptr-p;
    }

private:
	IS &is;

    fixed_stack<__YAS_JSON_STACK_SIZE> stack;
};

/***************************************************************************/

template<typename OS, std::size_t F, typename Trait>
struct json_ostream {
	json_ostream(OS &os)
		:os(os)
	{}

	template<typename T>
	void write_seq_size(T v) {
		write(YAS_SCAST(std::uint64_t, v));
	}

	// for arrays
	template<typename T>
	void write(const T *ptr, std::size_t size) {
		YAS_THROW_ON_WRITE_ERROR(size, !=, os.write(ptr, size));
	}

    // for char and signed char
    template<typename T>
    void write(const T &v, YAS_ENABLE_IF_IS_ANY_OF(T, char, signed char)) {
        write(YAS_SCAST(std::int16_t, v));
    }

    // for unsigned char
    template<typename T>
    void write(const T &v, YAS_ENABLE_IF_IS_ANY_OF(T, unsigned char)) {
        write(YAS_SCAST(std::uint16_t, v));
    }

	// for bools only
	template<typename T>
	void write(const T &v, YAS_ENABLE_IF_IS_ANY_OF(T, bool)) {
        if ( v ) {
            static const char ltrue[] = "true";
            YAS_THROW_ON_WRITE_ERROR(sizeof(ltrue)-1, !=, os.write(ltrue, sizeof(ltrue)-1));
        } else {
            static const char lfalse[] = "false";
            YAS_THROW_ON_WRITE_ERROR(sizeof(lfalse)-1, !=, os.write(lfalse, sizeof(lfalse)-1));
        }
	}

	// for signed 16/32/64 bits
	template<typename T>
	void write(const T &v, YAS_ENABLE_IF_IS_ANY_OF(T, std::int16_t, std::int32_t, std::int64_t)) {
		char buf[sizeof(v)*4];
		std::size_t len = Trait::itoa(buf, sizeof(buf), v);

		YAS_THROW_ON_WRITE_ERROR(len, !=, os.write(buf, len));
	}

	// for unsigned 16/32/64 bits
	template<typename T>
	void write(const T &v, YAS_ENABLE_IF_IS_ANY_OF(T, std::uint16_t, std::uint32_t, std::uint64_t)) {
		char buf[sizeof(v)*4];
		std::size_t len = Trait::utoa(buf, sizeof(buf), v);

		YAS_THROW_ON_WRITE_ERROR(len, !=, os.write(buf, len));
	}

	// for floats
	template<typename T>
	void write(const T &v, YAS_ENABLE_IF_IS_ANY_OF(T, float)) {
		char buf[std::numeric_limits<T>::max_exponent10 + 20];
		std::size_t len = Trait::ftoa(buf, sizeof(buf), v);

		YAS_THROW_ON_WRITE_ERROR(len, !=, os.write(buf, len));
	}

	// for doubles
	template<typename T>
	void write(const T &v, YAS_ENABLE_IF_IS_ANY_OF(T, double)) {
		char buf[std::numeric_limits<T>::max_exponent10 + 20];
		std::size_t len = Trait::dtoa(buf, sizeof(buf), v);

		YAS_THROW_ON_WRITE_ERROR(len, !=, os.write(buf, len));
	}

    /////////////////////////////////////////////////////////////////////////

    void write_key(const char *str, std::size_t len) {
        write("\"", 1);
        write(str, len);
        write("\":", 2);
    }

    void start_object_node(const char *name, std::size_t len) {
        if ( stack.empty() ) {
            write_start_object();
        } else {
            if ( stack.top() == e_state::in_object ) {
                write_key(name, len);
            }
            write_start_object();
        }

        stack.push(e_state::in_object);
    }
    void start_array_node() {
        write_start_array();
        stack.push(e_state::in_array);
    }
    void finish_node() {
        const auto top = stack.top();
        if ( top == e_state::in_array ) {
            write_end_array();
        } else {
            write_end_object();
        }

        stack.pop();
    }

    void write_start_object() { write("{", 1); }
    void write_end_object() { write("}", 1); }

    void write_start_array() { write("[", 1); }
    void write_end_array() { write("]", 1); }

private:
	OS &os;

    fixed_stack<__YAS_JSON_STACK_SIZE> stack;
};

/***************************************************************************/

} // ns detail
} // ns yas

#endif // __yas__detail__io__json_streams_hpp
