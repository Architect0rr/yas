
// Copyright (c) 2010-2012 niXman (i dot nixman dog gmail dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef _yas__stream_hpp__included_
#define _yas__stream_hpp__included_

#include <yas/detail/tools/buffer.hpp>
#include <yas/detail/type_traits/properties.hpp>

#include <memory>
#include <sstream>

namespace yas {
namespace detail {

/***************************************************************************/

template<typename Archive>
struct omemstream: std::stringbuf {
	enum { default_buffer_size = 1024*4 };

	omemstream()
		:std::stringbuf()
		,buf(default_buffer_size)
	{
		stream.reset(new std::ostream(this));
		setp(buf.data, buf.data+buf.size);
	}

	omemstream(size_t size)
		:std::stringbuf()
		,buf(size)
	{
		stream.reset(new std::ostream(this));
		setp(buf.data, buf.data+buf.size);
	}

	omemstream(char* ptr, size_t size)
		:std::stringbuf()
	{
		stream.reset(new std::ostream(this));
		setp(ptr, ptr+size);
	}

	virtual ~omemstream() {}

	std::streamsize write(const char* ptr, size_t size) {
		return sputn(static_cast<const char_type*>(ptr), size);
	}

	template<typename T>
	std::ostream& operator<< (const T& v) {
		return ((*stream) << v);
	}

	intrusive_buffer get_intrusive_buffer() const {
		return intrusive_buffer(pbase(), pptr()-pbase());
	}

#if defined(YAS_SHARED_BUFFER_USE_STD_SHARED_PTR) || \
	defined(YAS_SHARED_BUFFER_USE_BOOST_SHARED_PTR)
	shared_buffer get_shared_buffer() const {
		return shared_buffer(pbase(), pptr()-pbase());
	}
#endif

	std::string str() const {return std::string(pbase(), pptr());}

private:
	struct buffer_holder {
		buffer_holder()
			:data(0)
			,size(0)
		{}

		buffer_holder(size_t size) {
			data = new char[size];
			this->size = size;
		}

		~buffer_holder() { delete[] data; }

		char* data;
		size_t size;
	} buf;

	std::auto_ptr<std::ostream> stream;
};

/***************************************************************************/

template<typename Archive>
struct imemstream: std::stringbuf {
	imemstream(const char* ptr, size_t size)
		:std::stringbuf()
	{
		stream.reset(new std::istream(this));
		setg(const_cast<char_type*>(ptr),
			  const_cast<char_type*>(ptr),
			  const_cast<char_type*>(ptr)+size
		);
	}
	imemstream(const intrusive_buffer& buf)
		:std::stringbuf()
	{
		stream.reset(new std::istream(this));
		setg(const_cast<char_type*>(static_cast<const char_type*>(buf.data)),
			  const_cast<char_type*>(static_cast<const char_type*>(buf.data)),
			  const_cast<char_type*>(static_cast<const char_type*>(buf.data))+buf.size
		);
	}

#if defined(YAS_SHARED_BUFFER_USE_STD_SHARED_PTR) || \
	defined(YAS_SHARED_BUFFER_USE_BOOST_SHARED_PTR)
	imemstream(const shared_buffer& buf)
		:std::stringbuf()
	{
		stream.reset(new std::istream(this));
		setg(const_cast<char_type*>(static_cast<const char_type*>(buf.data.get())),
			  const_cast<char_type*>(static_cast<const char_type*>(buf.data.get())),
			  const_cast<char_type*>(static_cast<const char_type*>(buf.data.get()))+buf.size
		);
	}
#endif

	virtual ~imemstream() {}

	std::streamsize read(char* ptr, size_t size) {return sgetn(static_cast<char_type*>(ptr), size);}

	char_type get() { return (*stream).get(); }

	template<typename T>
	std::istream& operator>> (T& v) {
		return ((*stream) >> v);
	}

	std::auto_ptr<std::istream> stream;
};

/***************************************************************************/

} // namespace detail
} // namespace yas

#endif // _yas__stream_hpp__included_

