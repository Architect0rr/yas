
// Copyright (c) 2010-2012 niXman (i dot nixman dog gmail dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef _yas__json__boost_tuple_serializer_hpp__included_
#define _yas__json__boost_tuple_serializer_hpp__included_

#include <yas/detail/config/config.hpp>

#if defined(YAS_HAS_BOOST_TUPLE)
#include <yas/detail/mpl/type_traits.hpp>
#include <yas/detail/boost_preprocessor/preprocessor.hpp>

#include <stdint.h>
#include <boost/tuple/tuple.hpp>
#endif

namespace yas {

/***************************************************************************/

#if 0 //defined(YAS_HAS_BOOST_TUPLE)

#define YAS_WRITE_BOOST_TUPLE_SIZE(count) \
	const uint8_t size = count; \
	ar.write(&size, sizeof(size))

#define YAS_WRITE_BOOST_TUPLE_ITEM(unused, idx, type) \
	if ( detail::is_pod<YAS_PP_CAT(type, idx)>::value ) \
		ar.write(&boost::tuples::get<idx>(tuple), sizeof(YAS_PP_CAT(type, idx))); \
	else \
		ar & boost::tuples::get<idx>(tuple);

#define YAS_READ_AND_CHECK_BOOST_TUPLE_SIZE(count) \
	uint8_t size = 0; \
	ar.read(&size, sizeof(size)); \
	BOOST_ASSERT_MSG(size == count, "size error on deserialize boost::tuple")

#define YAS_READ_BOOST_TUPLE_ITEM(unused, idx, type) \
	if ( detail::is_pod<YAS_PP_CAT(type, idx)>::value ) \
		ar.read(&boost::tuples::get<idx>(tuple), sizeof(YAS_PP_CAT(type, idx))); \
	else \
		ar & boost::tuples::get<idx>(tuple);

#define YAS_GENERATE_EMPTY_SAVE_SERIALIZE_BOOST_TUPLE_FUNCTION_VARIADIC() \
	template<typename Archive> \
	void apply(Archive&, const boost::tuples::tuple<>&) {}

#define YAS_GENERATE_EMPTY_LOAD_SERIALIZE_BOOST_TUPLE_FUNCTION_VARIADIC() \
	template<typename Archive> \
	void apply(Archive&, boost::tuples::tuple<>&) {}

#define YAS_GENERATE_SAVE_SERIALIZE_BOOST_TUPLE_FUNCTION_VARIADIC(unused, count, text) \
	template<typename Archive, YAS_PP_ENUM_PARAMS(YAS_PP_INC(count), typename T)> \
	void apply(Archive& ar, const boost::tuples::tuple<YAS_PP_ENUM_PARAMS(YAS_PP_INC(count), T)>& tuple) { \
		YAS_WRITE_BOOST_TUPLE_SIZE(YAS_PP_INC(count)); \
		YAS_PP_REPEAT( \
			YAS_PP_INC(count), \
			YAS_WRITE_BOOST_TUPLE_ITEM, \
			T \
		) \
	}

#define YAS_GENERATE_SAVE_SERIALIZE_BOOST_TUPLE_FUNCTIONS_VARIADIC(count) \
	YAS_GENERATE_EMPTY_SAVE_SERIALIZE_BOOST_TUPLE_FUNCTION_VARIADIC(); \
	YAS_PP_REPEAT( \
		count, \
		YAS_GENERATE_SAVE_SERIALIZE_BOOST_TUPLE_FUNCTION_VARIADIC, \
		~ \
	)

#define YAS_GENERATE_LOAD_SERIALIZE_BOOST_TUPLE_FUNCTION_VARIADIC(unused, count, text) \
	template<typename Archive, YAS_PP_ENUM_PARAMS(YAS_PP_INC(count), typename T)> \
	void apply(Archive& ar, boost::tuples::tuple<YAS_PP_ENUM_PARAMS(YAS_PP_INC(count), T)>& tuple) { \
		YAS_READ_AND_CHECK_BOOST_TUPLE_SIZE(YAS_PP_INC(count)); \
		YAS_PP_REPEAT( \
			YAS_PP_INC(count), \
			YAS_READ_BOOST_TUPLE_ITEM, \
			T \
		) \
	}

#define YAS_GENERATE_LOAD_SERIALIZE_BOOST_TUPLE_FUNCTIONS_VARIADIC(count) \
	YAS_GENERATE_EMPTY_LOAD_SERIALIZE_BOOST_TUPLE_FUNCTION_VARIADIC(); \
	YAS_PP_REPEAT( \
		count, \
		YAS_GENERATE_LOAD_SERIALIZE_BOOST_TUPLE_FUNCTION_VARIADIC, \
		~ \
	)

/***************************************************************************/

YAS_GENERATE_SAVE_SERIALIZE_BOOST_TUPLE_FUNCTIONS_VARIADIC(10);
YAS_GENERATE_LOAD_SERIALIZE_BOOST_TUPLE_FUNCTIONS_VARIADIC(10);

#endif // defined(YAS_HAS_BOOST_TUPLE)

/***************************************************************************/

} // namespace yas

#endif // _yas__json__boost_tuple_serializer_hpp__included_
