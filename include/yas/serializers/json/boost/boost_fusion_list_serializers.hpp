
// Copyright (c) 2010-2012 niXman (i dot nixman dog gmail dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef _yas__json__boost_fusion_list_serializer_hpp__included_
#define _yas__json__boost_fusion_list_serializer_hpp__included_

#include <yas/config/config.hpp>

#if 0
#if defined(YAS_HAS_BOOST_FUSION)

#include <yas/tools/boost_preprocessor/preprocessor.hpp>

#include <boost/fusion/container/list.hpp>
#include <boost/fusion/include/list.hpp>
#include <boost/fusion/container/list/list_fwd.hpp>
#include <boost/fusion/include/list_fwd.hpp>
#include <boost/fusion/container/generation/make_list.hpp>
#include <boost/fusion/include/make_list.hpp>
#include <boost/fusion/algorithm/iteration/for_each.hpp>
#include <boost/fusion/include/for_each.hpp>

namespace yas {
namespace detail {

/***************************************************************************/

template<typename Archive>
struct list_serializer {
   list_serializer(Archive& ar)
      :ar(ar)
   {}

   template<typename T>
   void operator()(const T& v) const {
      ar & v;
   }

   Archive& ar;
};

template<typename Archive>
struct list_deserializer {
   list_deserializer(Archive& ar)
      :ar(ar)
   {}

   template<typename T>
   void operator()(T& v) const {
      ar & v;
   }

   Archive& ar;
};

} // namespace detail

/***************************************************************************/

#define YAS_WRITE_FUSION_LIST_SIZE(count) \
   const boost::uint8_t size = count; \
   ar.write(&size, sizeof(size))

#define YAS_READ_AND_CHECK_FUSION_LIST_SIZE(count) \
   boost::uint8_t size = 0; \
   ar.read(&size, sizeof(size)); \
   BOOST_ASSERT_MSG(size == count, "size error on deserialize fusion::list")

#define YAS_GENERATE_EMPTY_SAVE_SERIALIZE_LIST_FUNCTION_VARIADIC() \
   template<typename Archive> \
   void apply(Archive&, const boost::fusion::list<>&) {}

#define YAS_GENERATE_EMPTY_LOAD_SERIALIZE_LIST_FUNCTION_VARIADIC() \
   template<typename Archive> \
   void apply(Archive&, boost::fusion::list<>&) {}

#define YAS_GENERATE_SAVE_SERIALIZE_LIST_FUNCTION_VARIADIC(unused, count, text) \
   template<typename Archive, YAS_PP_ENUM_PARAMS(YAS_PP_INC(count), typename T)> \
   void apply(Archive& ar, const boost::fusion::list<YAS_PP_ENUM_PARAMS(YAS_PP_INC(count), T)>& list) { \
      YAS_WRITE_FUSION_LIST_SIZE(YAS_PP_INC(count)); \
      boost::fusion::for_each(list, detail::list_serializer<Archive>(ar)); \
   }

#define YAS_GENERATE_SAVE_SERIALIZE_LIST_FUNCTIONS_VARIADIC(count) \
   YAS_GENERATE_EMPTY_SAVE_SERIALIZE_LIST_FUNCTION_VARIADIC(); \
   YAS_PP_REPEAT( \
      count, \
      YAS_GENERATE_SAVE_SERIALIZE_LIST_FUNCTION_VARIADIC, \
      ~ \
   )

#define YAS_GENERATE_LOAD_SERIALIZE_LIST_FUNCTION_VARIADIC(unused, count, text) \
   template<typename Archive, YAS_PP_ENUM_PARAMS(YAS_PP_INC(count), typename T)> \
   void apply(Archive& ar, boost::fusion::list<YAS_PP_ENUM_PARAMS(YAS_PP_INC(count), T)>& list) { \
      YAS_READ_AND_CHECK_FUSION_LIST_SIZE(YAS_PP_INC(count)); \
      boost::fusion::for_each(list, detail::list_deserializer<Archive>(ar)); \
   }

#define YAS_GENERATE_LOAD_SERIALIZE_LIST_FUNCTIONS_VARIADIC(count) \
   YAS_GENERATE_EMPTY_LOAD_SERIALIZE_LIST_FUNCTION_VARIADIC(); \
   YAS_PP_REPEAT( \
      count, \
      YAS_GENERATE_LOAD_SERIALIZE_LIST_FUNCTION_VARIADIC, \
      ~ \
   )

/***************************************************************************/

YAS_GENERATE_SAVE_SERIALIZE_LIST_FUNCTIONS_VARIADIC(FUSION_MAX_LIST_SIZE);
YAS_GENERATE_LOAD_SERIALIZE_LIST_FUNCTIONS_VARIADIC(FUSION_MAX_LIST_SIZE);

/***************************************************************************/

#define YAS_GENERATE_EMPTY_SAVE_SERIALIZE_LIST_FUNCTION() \
   template<typename Archive> \
   void apply(Archive&, const boost::fusion::list0<>&) {}

#define YAS_GENERATE_EMPTY_LOAD_SERIALIZE_LIST_FUNCTION() \
   template<typename Archive> \
   void apply(Archive&, boost::fusion::list0<>&) {}

#define YAS_GENERATE_SAVE_SERIALIZE_LIST_FUNCTION(unused, count, text) \
   template<typename Archive, YAS_PP_ENUM_PARAMS(YAS_PP_INC(count), typename T)> \
   void apply(Archive& ar, const YAS_PP_CAT(boost::fusion::list, YAS_PP_INC(count)) \
         <YAS_PP_ENUM_PARAMS(YAS_PP_INC(count), T)>& list) { \
      YAS_WRITE_FUSION_LIST_SIZE(YAS_PP_INC(count)); \
      boost::fusion::for_each(list, detail::list_serializer<Archive>(ar)); \
   }

#define YAS_GENERATE_SAVE_SERIALIZE_LIST_FUNCTIONS(count) \
   YAS_GENERATE_EMPTY_SAVE_SERIALIZE_LIST_FUNCTION(); \
   YAS_PP_REPEAT( \
      count, \
      YAS_GENERATE_SAVE_SERIALIZE_LIST_FUNCTION, \
      ~ \
   )

#define YAS_GENERATE_LOAD_SERIALIZE_LIST_FUNCTION(unused, count, text) \
   template<typename Archive, YAS_PP_ENUM_PARAMS(YAS_PP_INC(count), typename T)> \
   void apply(Archive& ar, YAS_PP_CAT(boost::fusion::list, YAS_PP_INC(count)) \
         <YAS_PP_ENUM_PARAMS(YAS_PP_INC(count), T)>& list) { \
      YAS_READ_AND_CHECK_FUSION_LIST_SIZE(YAS_PP_INC(count)); \
      boost::fusion::for_each(list, detail::list_deserializer<Archive>(ar)); \
   }

#define YAS_GENERATE_LOAD_SERIALIZE_LIST_FUNCTIONS(count) \
   YAS_GENERATE_EMPTY_LOAD_SERIALIZE_LIST_FUNCTION(); \
   YAS_PP_REPEAT( \
      count, \
      YAS_GENERATE_LOAD_SERIALIZE_LIST_FUNCTION, \
      ~ \
   )

/***************************************************************************/

YAS_GENERATE_SAVE_SERIALIZE_LIST_FUNCTIONS(FUSION_MAX_LIST_SIZE);
YAS_GENERATE_LOAD_SERIALIZE_LIST_FUNCTIONS(FUSION_MAX_LIST_SIZE);

/***************************************************************************/

} // namespace yas

#endif // defined(YAS_HAS_BOOST_FUSION)
#endif

#endif // _yas__json__boost_fusion_list_serializer_hpp__included_
